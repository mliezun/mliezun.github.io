
let base = import("../base.gr")

# Create new Post Object
let post = base.Post(
    "Mlisp: My own lisp implementation compiled to WASM",
    "Lisp implementation written in C that compiles to WASM with emscripten.",
    "Miguel Liezun",
    "lisp,wasm,emcc,C/C++,emscripten",
    [
    [
        "div",
        [],
        [
            "",
            ""
        ]
    ],
    [
        "h2",
        [],
        [
            "Mlisp, My own lisp implementation"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<a href=\"https://github.com/mliezun/mlisp\">Mlisp</a> a tiny lispy language based on the book <a href=\"http://www.buildyourownlisp.com/\">Build Your Own Lisp</a>.",
            "",
            "The interpreter is written in C and compiled directly to WASM. You can try it in this page by openning the developer console of your browser and typing <span class=\"single-quote\">Mlisp.interpret(\"+ 2 2\")</span> or using the repl shown below.",
            "",
            ""
        ]
    ],
    [
        "h3",
        [],
        [
            "Interface"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "To be able to access C functions from your browser you have to export them. Let's see how we can define a function that is exported.",
            "",
            "<pre class=\"triple-quote c\">",
            "#if __EMSCRIPTEN__",
            "EMSCRIPTEN_KEEPALIVE",
            "#endif",
            "int mlisp_init();",
            "</pre>",
            "",
            "When compilen with <span class=\"single-quote\">emcc</span> the emscripten compiler to wasm, you have to add <span class=\"single-quote\">EMSCRIPTEN_KEEPALIVE</span> macro before your function so it doesn't get optimized away.",
            "",
            "The exported functions in this project are:",
            "",
            "<pre class=\"triple-quote c\">",
            "int mlisp_init();",
            "char *mlisp_interpret(char *input);",
            "void mlisp_cleanup();",
            "</pre>",
            "",
            "The project is then compiled with: ",
            "",
            "<pre class=\"triple-quote \">",
            "emcc -std=c99  -Wall -O3 -s WASM=1 -s EXTRA_EXPORTED_RUNTIME_METHODS='[\"cwrap\"]'",
            "</pre>",
            "",
            "That means that you would be able to access the exported functions using a <span class=\"single-quote\">cwrap</span> that let's you wrap a C function call from a Javascript function call.",
            "",
            "This compilation generates two files <span class=\"single-quote\">mlisp.js</span> and <span class=\"single-quote\">mlisp.wasm</span>.",
            "",
            "The javascript file defines a <span class=\"single-quote\">Module</span> that provides useful tool to access exported functions.",
            "",
            ""
        ]
    ],
    [
        "h4",
        [],
        [
            "Let's start using it"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<pre class=\"triple-quote js\">",
            "const Mlisp = {",
            "    init: Module.cwrap('mlisp_init', 'number', []),",
            "    interpret: Module.cwrap('mlisp_interpret', 'string', ['string']),",
            "    cleanup: Module.cwrap('mlisp_cleanup', 'void', []),",
            "};",
            "",
            "// Init interpreter",
            "Mlisp.init();",
            "",
            "// Run some commands",
            "console.log(Mlisp.interpret(\"+ 2 2\"));",
            "",
            "// Cleanup interpreter",
            "Mlisp.cleanup();",
            "</pre>",
            "",
            ""
        ]
    ],
    [
        "h3",
        [],
        [
            "Automated Build &amp; Release from github"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "I made a github workflow for this project to automatically build and release so you can retrieve them from <a href=\"https://github.com/mliezun/mlisp/releases/tag/refs%2Fheads%2Fmaster\">Github</a>.",
            "",
            "",
            ""
        ]
    ],
    [
        "h3",
        [],
        [
            "REPL"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<script src=\"/assets/mlisp/mlisp.js\"></script>",
            "",
            "<style>",
            ".container-centered {",
            "  display: flex;",
            "  justify-content: center;",
            "}",
            "",
            ".vertical-centered {",
            "  display: block;",
            "}",
            "</style>",
            "",
            "<div class=\"container-centered\">",
            "    <div class=\"vertical-centered\" style=\"width: 40vw\">",
            "        <textarea id=\"show-repl\" disabled=\"true\" style=\"min-width: 40vw; max-width: 40vw; min-height: 20vh\"></textarea>",
            "        <input id=\"input-command\" type=\"text\" style=\"min-width: 40vw; max-width: 40vw\" placeholder=\"&gt; Input some commands\">",
            "    </div>",
            "</div>",
            "",
            "<script type=\"application/javascript\">",
            "var A = {",
            "    mlisp: null,",
            "    init () {",
            "        const node = document.getElementById('input-command');",
            "        node.addEventListener(\"keyup\", (event) => {",
            "            if (event.key === \"Enter\") {",
            "                this.handleInput(event);",
            "            }",
            "        });",
            "    },",
            "    handleInput(ev) {",
            "        if (!this.mlisp) {",
            "            window.Mlisp = {",
            "                init: Module.cwrap('mlisp_init', 'number', []),",
            "                interpret: Module.cwrap('mlisp_interpret', 'string', ['string']),",
            "                cleanup: Module.cwrap('mlisp_cleanup', 'void', []),",
            "            };",
            "            this.mlisp = window.Mlisp;",
            "            this.mlisp.init();",
            "        }",
            "        const node = ev.target;",
            "        const cmd = node.value;",
            "        if (!cmd) {",
            "            return;",
            "        }",
            "        const output = document.getElementById('show-repl');",
            "        const result = this.mlisp.interpret(cmd);",
            "        node.value = null;",
            "        output.value += `> ${cmd}\\n\\t${result}\\n`;",
            "    }",
            "};",
            "",
            "A.init();",
            "</script>",
            "",
            "",
            "",
            ""
        ]
    ],
    [
        "h3",
        [],
        [
            "Interesting commands to try out"
        ]
    ],
    [
        "div",
        [],
        [
            "",
            "<li><span class=\"single-quote\">foldl</span>: Fold left (same as reduce left)",
            "    - <span class=\"single-quote\">(foldl + 0 {1 2 3 4 5})</span>: Sum of elements",
            "<li><span class=\"single-quote\">filter</span>",
            "    - <span class=\"single-quote\">(filter (\\ {e} {> e 3}) {1 2 3 4 5 6})</span>: Elements bigger than 3",
            "<li><span class=\"single-quote\">map</span>",
            "    - <span class=\"single-quote\">(foldl * 1 (map (\\ {e} {* e 2}) {1 1 1 1 1}))</span>: Multiply elements by 2 and then multiply all elements",
            "",
            ""
        ]
    ]
]
)
