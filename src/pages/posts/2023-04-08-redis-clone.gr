let base = import("../base.gr")


let firstParagraph = "In this post we're going to write a basic Redis clone in Go that implements the most simple commands: GET, 
SET, DEL and QUIT. At the end you'll know how to parse a byte stream from a live TCP connection, and hopefully have a working
implementation of Redis."

fn optionFormat(op, time, desc) {
	return "<span class=\"single-quote\">" + op + "</span>" + " <em>" + time + "</em> -- " + desc
}

# Create new Post Object
let post = base.Post(
    "Writing a Redis clone in Go from scratch",
    firstParagraph,
    "Miguel Liezun",
    "programming,go,redis,diy,golang",
    [
		["h2", [], "Writing a Redis clone in Go from scratch"],
		["p", [], firstParagraph],
		["p", [], "What's intersting about this project is that it's <em>production ready</em> (not really).
		It's being used in production in an old Web app that I made for a client in 2017. 
		<strong>It has been running for a few months now without issues</strong>."],
		["p", [], "I mantain that app to this day and I charge like 50 bucks a month for it. I do it because
		Im friends with the person that uses the app."],
		["p", [], "Long story short, the app's backend is written in PHP and uses Redis for caching, only GET, SET and DEL commands. 
		I asked my friend if I could replace it with my custom version and said yes, so I decided to give it a go."],

		["p", [], "If you're looking for C/C++ implementation, go check out this <a href='https://build-your-own.org/redis/' target='_blank'>book</a>."],
		
		["h3", [], "What we'll be building"],
		["p", [], [
			"If you go to the ",
			["a", ["href", "https://redis.io/commands/", "target", "_blank"], "command list"],
			" on redis webpage you'll see that there are 463 commands to this day (maybe more if you're in the future).",
		]],
		["p", [], [
			"That's a crazy number. Here, we're only implementing 4 commands: <span class=\"single-quote language-undefined\">GET, SET, DEL, QUIT</span>,",
			" <em>the other 459 commands are left as an exercise to the reader</em>.",
		]],
		["h4", [], "GET"],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
				"GET key"
			]],
		]],
		["p", [], [
			"Returns the value referenced by <span class=\"single-quote language-undefined\">key</span>.",
			" If the key does not exist then <span class=\"single-quote language-undefined\">nil</span> is returned."
		]],
		["h4", [], "SET"],
		["p", [], [
			"SET command gains more features on newer versions of Redis. We're going to implement one that has all features",
			" that were realeased up until version 6.0.0.",
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis"], [
				"SET key value [NX | XX] [EX seconds | PX milliseconds]"
			]],
		]],
		["p", [], [
			"Stores <span class=\"single-quote language-undefined\">value</span> as a string that is referenced by <span class=\"single-quote language-undefined\">key</span>.",
			" Overwrites any data that was previously referenced by the key."
		]],
		["h5", [], "Options"],
		["p", [], [
			["ul", [], [
				["li", [], optionFormat("EX", "seconds", "Set the specified expire time, in seconds.")],
				["li", [], optionFormat("PX", "milliseconds", "Set the specified expire time, in seconds.")],
				["li", [], optionFormat("NX", "", "Only set the key if it does not already exist.")],
				["li", [], optionFormat("XX", "", "Only set the key if it already exist.")],
			]]
		]],
		["h4", [], "DEL"],
		["p", [], [
			["pre", ["class", "triple-quote redis"], [
				"DEL key [key ...]"
			]],
		]],
		["p", [], [
			"Takes 'any' amount of keys as input and removes all of them from storage. If a key doesn't exist it is ignored.",
			" Returns the amount of keys that were deleted."
		]],
		["h4", [], "QUIT"],
		["p", [], [
			["pre", ["class", "triple-quote redis"], [
				"QUIT"
			]],
		]],
		["p", [], [
			"When receiving this command the server closes the connection. It's useful for interactive sessions.",
			" For production environments the client should close the connection without sending any commands."
		]],
		["h4", [], "Examples"],
		["p", [], [
			"Let's start an interactive session of redis to test some commands.",
			" We can install redis-server with docker and run it locally.",
			" Then we can use telnet to connect directly via TCP.",
			" Open a terminal and execute the following instructions:"
		]],
		["p", [], [
			["pre", ["class", "triple-quote bash"], [
"$ docker run -d --name redis-server -p 6379:6379 redis:alpine

$ telnet 127.0.0.1 6379
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'."
			]],
		]],
		["p", [], [
			"At this point the prompt should be waiting for you to write something. We're gonna test a couple of commands.",
			" In the code boxes below the first line is the command, following lines are the response."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"GET a
$-1"
			]],
			"^ That weird $-1 is the special <em>nil</em> value. Which means there's nothing stored here."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"set a 1
+OK"
			]],
			"^ First thing to notice here is that we can use lowercase version of SET.",
			" Also, when the command is successful returns +OK."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"set b 2
+OK"
			]],
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"SET c 3
+OK"
			]],
			"^ Just storing a couple more values.",
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"GET a
$1
1"
			]],
			"^ Here the response is returned in two lines. First line is the length of the string. Second line",
			" is the actual string."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"get b
$1
2"
			]],
			"^ We can also use lowercase version of GET, I bet commands are case-insensitive."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"get C
$-1"
			]],
			"^ Testing with uppercase C gives a <em>nil</em>. Keys seem to be case-sensitive, probably values too.",
			" That makes sense."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"del a b c
:3"
			]],
			"^ Deleting everything returns the amount of keys deleted. Integers are indicated by ':'."
		]],
		["p", [], [
			["pre", ["class", "triple-quote redis language-css"], [
"quit
+OK
Connection closed by foreign host."
			]],
			"^ When we send QUIT, the server closes the connection and we're back to our terminal session."
		]],
		["p", [], [
			"With those tests we have enough information to start building. We learned a little bit about the",
			" redis protocol and what the responses look like."
		]],
		["h4", [], "Sending commands"],
		["p", [], [
			"Until now we've been using the <em>inline</em> version of redis command.",
			" There's another kind that follows the ",
			["a", ["href", "https://redis.io/docs/reference/protocol-spec/", "target", "_blank"], "RESP (Redis serialization protocol)."],
		]],
		["p", [], [
			"The RESP protocol is quite similar to what we've seen in the examples above.",
			"The most important addition is <em>arrays</em>. Let's see a Client<>Server interaction",
			" using arrays."
		]],
		["p", [], [
			["strong", [], "Client"],
			["pre", ["class", "triple-quote redis language-css"], [
"*2
$3
GET
$1
a"
			]],
			["strong", [], "Server"],
			["pre", ["class", "triple-quote redis language-css"], [
"$-1"
			]],
			"The server response looks the same as in the inline version.",
			" But what the client sends looks very different:",
		]],
		["ul", [], [
			["li", [], [
				"In this case, the first thing the client sends is '*' followed by the number of elements in the array,",
				" so '*2' indicates that there are 2 elements in the array and they would be found in the following lines."
			]],
			["li", [], [
				"After that we have '$3' which means we're expecting the first element to be a string of length 3.",
				" Next line is the actual string, in our case is the command 'GET'."
			]],
			["li", [], [
				"The next value is also a string and is the key passed to the command.",
			]],
		]],
		["p", [], [
			"That's almost everything we need to start building a client. There's one last thing: <strong>error responses</strong>.",
			["pre", ["class", "triple-quote redis language-css"], [
"-Example error message
-ERR unknown command 'foo'
-WRONGTYPE Operation against a key holding the wrong kind of value"
			]],
			"A response that starts with a '-' is considered an error. The first word is the error type.",
			" We'll only gonna be using 'ERR' as a generic response."
		]],
		["p", [], [
			"RESP protocol is what client libraries use to communicate with Redis.",
			" With all that in our toolbox we're ready to start building."
		]],
		["h3", [], "Receiving connections"],
		["p", [], [
			"A crucial part of our serve is the ability to receive client's information.",
			" The way that this is done is that the server listens on a TCP port and waits",
			" for client connections. Let's start building the basic structure."
		]],
		["p", [], [
			"Create a new go module, open main.go and create a main function as follows."
		]],
		["pre", ["class", "triple-quote go language-go"], [
"package main

import (
	\"bufio\"
	\"fmt\"
	\"log\"
	\"net\"
	\"strconv\"
	\"strings\"
	\"sync\"
	\"time\"
)

var cache sync.Map

func main() {
	listener, err := net.Listen(\"tcp\", \":6380\")
	if err != nil {
		log.Fatal(err)
	}
	log.Println(\"Listening on tcp://0.0.0.0:6380\")

	for {
		conn, err := listener.Accept()
		log.Println(\"New connection\", conn)
		if err != nil {
			log.Fatal(err)
		}

		go startSession(conn)
	}
}"
		]],
		["p", [], [
			"After declaring the package and imports, we create a global sync.Map that would be our cache.",
			" That's where keys are gonna be stored and retrieved."
		]],
		["p", [], [
			"On the main function we start listening on port 6380. After that we have an infinite loop that accepts",
			" new connections and spawns a goroutine to handle the session."
		]],
		["h4", [], "Session handling"],
		["pre", ["class", "triple-quote go language-go"], [
"// startSession handles the client's session. Parses and executes commands and writes
// responses back to the client.
func startSession(conn net.Conn) {
	defer func() {
		log.Println(\"Closing connection\", conn)
		conn.Close()
	}()
	defer func() {
		if err := recover(); err != nil {
			log.Println(\"Recovering from error\", err)
		}
	}()
	p := NewParser(conn)
	for {
		cmd, err := p.command()
		if err != nil {
			log.Println(\"Error\", err)
			conn.Write([]uint8(\"-ERR \" + err.Error() + \"\\r\\n\"))
			break
		}
		if !cmd.handle() {
			break
		}
	}
}"
		]],
		["p", [], [
			"It's super important that we close the connection when things are done. That's why we set a deferred function,",
			" to close the connection when the session finishes."
		]],
		["p", [], [
			"After that we handle any panics using recover. We do this mainly because at some point we might be reading from",
			" a connection that was closed by the client. And we don't want the entire server to die in case of an error."
		]],
		["p", [], [
			"Then we create a new parser and start trying to parse commands from the live connection. If we encounter an error",
			" we write the error message back to the client and we finish the session."
		]],
		["p", [], [
			"When cmd.handle() returns false (signaling end of session) we break the loop and the session finishes."
		]],
		["h3", [], "Parsing commands"],
		["p", [], [
			"Basic parser structure:",
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// Parser contains the logic to read from a raw tcp connection and parse commands.
type Parser struct {
	conn net.Conn
	r    *bufio.Reader
	// Used for inline parsing
	line []byte
	pos  int
}

// NewParser returns a new Parser that reads from the given connection.
func NewParser(conn net.Conn) *Parser {
	return &amp;Parser{
		conn: conn,
		r:    bufio.NewReader(conn),
		line: make([]byte, 0),
		pos:  0,
	}
}"
		]],
		["p", [], [
			"This is pretty straight-forward. We store a reference to the connection, a reader and then some",
			" attributes that will help us with parsing."
		]],
		["p", [], [
			"The NewParser() function should be used as a contructor for Parser objects."
		]],
		["p", [], [
			"We need some helper functions that will make parsing easier:"
		]],
		["pre", ["class", "triple-quote go language-go"], [
"func (p *Parser) current() byte {
	if p.atEnd() {
		return '\\r'
	}
	return p.line[p.pos]
}

func (p *Parser) advance() {
	p.pos++
}

func (p *Parser) atEnd() bool {
	return p.pos >= len(p.line)
}

func (p *Parser) readLine() ([]byte, error) {
	line, err := p.r.ReadBytes('\\r')
	if err != nil {
		return nil, err
	}
	if _, err := p.r.ReadByte(); err != nil {
		return nil, err
	}
	return line[:len(line)-1], nil
}"
		]],
		["p", [], [
			"Also quite simple.",
			["ul", [], [
				["li", [], "current(): Returns the character being pointed at by pos inside the line."],
				["li", [], "advance(): Point to the next character in the line."],
				["li", [], "atEnd(): Indicates if we're at the end of the line."],
				["li", [], "readLine(): Reads the input from the connection up to the carriage return char. Skips the '\\n' char."],
			]]
		]],
		["h4", [], "Parsing strings"],
		["p", [], [
			"In Redis we can send commands like so:"
		]],
		["pre", ["class", "triple-quote redis language-css"], [
			"SET text \"quoted \\\"text\\\" here\"",
		]],
		["p", [], [
			"This means we need a way to handle \\, \" chars inside a string."
		]],
		["p", [], [
			"For that we need a special parsing function that will handle strings:",
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// consumeString reads a string argument from the current line.
func (p *Parser) consumeString() (s []byte, err error) {
	for p.current() != '\"' &amp;&amp; !p.atEnd() {
		cur := p.current()
		p.advance()
		next := p.current()
		if cur == '\\\\' &amp;&amp; next == '\"' {
			s = append(s, '\"')
			p.advance()
		} else {
			s = append(s, cur)
		}
	}
	if p.current() != '\"' {
		return nil, errors.New(\"unbalanced quotes in request\")
	}
	p.advance()
	return
}"
		]],
		["p", [], [
			"From the functions that we've declared up to this point it's pretty clear that our parser",
			" will be reading the input line by line. And the consuming the line one char at a time."
		]],
		["p", [], [
			"The way consumeString() works is quite tricky.",
			" It assumes that the initial \" has been consumed before entering the function.",
			" And it consumes all characters in the current line up until it reaches the closing quotes character",
			" or the end of the line."
		]],
		["p", [], [
			"Inside the loop we can see that we're reading the current character and advancing the pointer, then",
			" the next character.",
			" When the user is sending an escaped quote inside the string we detect that by checking the current",
			" and the next characters.",
			" In this special case we end up advancing the pointer twice. Because we consumed two: chars the backslash",
			" and the quote. But we added only one char to the output: \"."
		]],
		["p", [], [
			"We append all other characters to the output buffer."
		]],
		["p", [], [
			"When the loop finishes, if we're not pointing to the end quote char, that means that the user",
			" sent an invalid command and we return an error."
		]],
		["p", [], [
			"Otherwise we advance the pointer and return normally."
		]],
		["h4", [], "Parsing commands"],
		["pre", ["class", "triple-quote go language-go"], [
"// command parses and returns a Command.
func (p *Parser) command() (Command, error) {
	b, err := p.r.ReadByte()
	if err != nil {
		return Command{}, err
	}
	if b == '*' {
		log.Println(\"resp array\")
		return p.respArray()
	} else {
		line, err := p.readLine()
		if err != nil {
			return Command{}, err
		}
		p.pos = 0
		p.line = append([]byte{}, b)
		p.line = append(p.line, line...)
		return p.inline()
	}
}"
		]],
		["p", [], [
			"We read the first character sent by the client. If it's an asterisk we handle it",
			" using the RESP protocol. Otherwise we assume that it's an inline command."
		]],
		["p", [], [
			"Let's start by parsing the inline commands first."
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// Command implements the behavior of the commands.
type Command struct {
	args []string
	conn net.Conn
}

// inline parses an inline message and returns a Command. Returns an error when there's
// a problem reading from the connection or parsing the command.
func (p *Parser) inline() (Command, error) {
	// skip initial whitespace if any
	for p.current() == ' ' {
		p.advance()
	}
	cmd := Command{conn: p.conn}
	for !p.atEnd() {
		arg, err := p.consumeArg()
		if err != nil {
			return cmd, err
		}
		if arg != \"\" {
			cmd.args = append(cmd.args, arg)
		}
	}
	return cmd, nil
}"
		]],
		["p", [], [
			"This is also quite easy to skim through. We skip any leading whitespace",
			" in case the user sent something like '     GET a'.",
		]],
		["p", [], [
			"We create a new Command object with a reference to the session connection.",
		]],
		["p", [], [
			"While we're not at the end of the line we consume args and append them to the",
			" arg list of the command object if they are not empty."
		]],
		["p", [], [
			["strong", [], "Consuming arguments"]
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// consumeArg reads an argument from the current line.
func (p *Parser) consumeArg() (s string, err error) {
	for p.current() == ' ' {
		p.advance()
	}
	if p.current() == '\"' {
		p.advance()
		buf, err := p.consumeString()
		return string(buf), err
	}
	for !p.atEnd() &amp;&amp; p.current() != ' ' &amp;&amp; p.current() != '\\r' {
		s += string(p.current())
		p.advance()
	}
	return
}"
		]],
		["p", [], [
			"Same as before we consume any leading whitespace."
		]],
		["p", [], [
			"If we find a quoted string we call our function from before: consumeString()."
		]],
		["p", [], [
			"We append all characters to the output until we reach a carriage return \\r, a whitespace",
			" or the end of the line."
		]],
		["h4", [], "Parsing RESP protocol"],
		["pre", ["class", "triple-quote go language-go"], [
"// respArray parses a RESP array and returns a Command. Returns an error when there's
// a problem reading from the connection.
func (p *Parser) respArray() (Command, error) {
	cmd := Command{}
	elementsStr, err := p.readLine()
	if err != nil {
		return cmd, err
	}
	elements, _ := strconv.Atoi(string(elementsStr))
	log.Println(\"Elements\", elements)
	for i := 0; i < elements; i++ {
		tp, err := p.r.ReadByte()
		if err != nil {
			return cmd, err
		}
		switch tp {
		case ':':
			arg, err := p.readLine()
			if err != nil {
				return cmd, err
			}
			cmd.args = append(cmd.args, string(arg))
		case '$':
			arg, err := p.readLine()
			if err != nil {
				return cmd, err
			}
			length, _ := strconv.Atoi(string(arg))
			text := make([]byte, 0)
			for i := 0; len(text) <= length; i++ {
				line, err := p.readLine()
				if err != nil {
					return cmd, err
				}
				text = append(text, line...)
			}
			cmd.args = append(cmd.args, string(text[:length]))
		case '*':
			next, err := p.respArray()
			if err != nil {
				return cmd, err
			}
			cmd.args = append(cmd.args, next.args...)
		}
	}
	return cmd, nil
}"
		]],
		["p", [], [
			"As we know, the leading asterisk has already been consumed from the connection input.",
			" So, at this point, the first line contains the number of elements to be consumed.",
			" We read that into an integer."
		]],
		["p", [], [
			"We create a for loop with that will parse all the elements in the array.",
			" We consume the first character to detect which kind of element we need to consume: int, string or array."
		]],
		["p", [], [
			"The int case is quite simple, we just read until the rest of the line.",
		]],
		["p", [], [
			"The array case is also quite simple, we call respArray() and append the args of the result,",
			" to the current command object."
		]],
		["p", [], [
			"For strings we read the first line and get the size of the string.",
			" We keep reading lines until we have read the indicated amount of characters."
		]],
		["h3", [], "Handling commands"],
		["p", [], [
			"This is the 'fun' part of the implementation. Were our server becomes alive.",
			" In this section we'll implement the actual functionality of the commands."
		]],
		["p", [], [
			"Let's start with the cmd.handle() function that we saw in handleSession()."
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// handle Executes the command and writes the response. Returns false when the connection should be closed.
func (cmd Command) handle() bool {
	switch strings.ToUpper(cmd.args[0]) {
	case \"GET\":
		return cmd.get()
	case \"SET\":
		return cmd.set()
	case \"DEL\":
		return cmd.del()
	case \"QUIT\":
		return cmd.quit()
	default:
		log.Println(\"Command not supported\", cmd.args[0])
		cmd.conn.Write([]uint8(\"-ERR unknown command '\" + cmd.args[0] + \"'\\r\\n\"))
	}
	return true
}"
		]],
		["p", [], [
			"Needs no further explanation. Let's implement the easiest command: QUIT."
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// quit Used in interactive/inline mode, instructs the server to terminate the connection.
func (cmd *Command) quit() bool {
	if len(cmd.args) != 1 {
		cmd.conn.Write([]uint8(\"-ERR wrong number of arguments for '\" + cmd.args[0] + \"' command\\r\\n\"))
		return true
	}
	log.Println(\"Handle QUIT\")
	cmd.conn.Write([]uint8(\"+OK\\r\\n\"))
	return false
}"
		]],
		["p", [], [
			"If any extra arguments were passed to QUIT, it returns an error."
		]],
		["p", [], [
			"Otherwise write +OK to the client and return false.",
			" Which if you remember handleSession() is the value to indicate that the session has finished.",
			" After that the connection will be automatically closed."
		]],
		["p", [], [
			"The next easieast command is DEL",
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// del Deletes a key from the cache.
func (cmd *Command) del() bool {
	count := 0
	for _, k := range cmd.args[1:] {
		if _, ok := cache.LoadAndDelete(k); ok {
			count++
		}
	}
	cmd.conn.Write([]uint8(fmt.Sprintf(\":%d\\r\\n\", count)))
	return true
}"
		]],
		["p", [], [
			"Iterates through all the keys passed, deletes the ones that exists and",
			" writes back to the client the amount of keys deleted."
		]],
		["p", [], [
			"Returns true, which means the connection is kept alive."
		]],
		["h4", [], "Handling GET"],
		["pre", ["class", "triple-quote go language-go"], [
"// get Fetches a key from the cache if exists.
func (cmd Command) get() bool {
	if len(cmd.args) != 2 {
		cmd.conn.Write([]uint8(\"-ERR wrong number of arguments for '\" + cmd.args[0] + \"' command\\r\\n\"))
		return true
	}
	log.Println(\"Handle GET\")
	val, _ := cache.Load(cmd.args[1])
	if val != nil {
		res, _ := val.(string)
		if strings.HasPrefix(res, \"\\\"\") {
			res, _ = strconv.Unquote(res)
		}
		log.Println(\"Response length\", len(res))
		cmd.conn.Write([]uint8(fmt.Sprintf(\"$%d\\r\\n\", len(res))))
		cmd.conn.Write(append([]uint8(res), []uint8(\"\\r\\n\")...))
	} else {
		cmd.conn.Write([]uint8(\"$-1\\r\\n\"))
	}
	return true
}"
		]],
		["p", [], [
			"As before, we validate that the correct number of arguments were passed to the command."
		]],
		["p", [], [
			"We load the value from the global variable cache."
		]],
		["p", [], [
			"If the value is nil we write back to the client the special $-1."
		]],
		["p", [], [
			"When we have a value we cast it as string and unquote it in case it's quoted.",
			" Then we write the length as the first line of the response and the string as the",
			" second line of the response."
		]],
		["h4", [], "Handling SET"],
		["p", [], [
			"This is the most complicated command that we'll implement."
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// set Stores a key and value on the cache. Optionally sets expiration on the key.
func (cmd Command) set() bool {
	if len(cmd.args) < 3 || len(cmd.args) > 6 {
		cmd.conn.Write([]uint8(\"-ERR wrong number of arguments for '\" + cmd.args[0] + \"' command\\r\\n\"))
		return true
	}
	log.Println(\"Handle SET\")
	log.Println(\"Value length\", len(cmd.args[2]))
	if len(cmd.args) > 3 {
		pos := 3
		option := strings.ToUpper(cmd.args[pos])
		switch option {
		case \"NX\":
			log.Println(\"Handle NX\")
			if _, ok := cache.Load(cmd.args[1]); ok {
				cmd.conn.Write([]uint8(\"$-1\\r\\n\"))
				return true
			}
			pos++
		case \"XX\":
			log.Println(\"Handle XX\")
			if _, ok := cache.Load(cmd.args[1]); !ok {
				cmd.conn.Write([]uint8(\"$-1\\r\\n\"))
				return true
			}
			pos++
		}
		if len(cmd.args) > pos {
			if err := cmd.setExpiration(pos); err != nil {
				cmd.conn.Write([]uint8(\"-ERR \" + err.Error() + \"\\r\\n\"))
				return true
			}
		}
	}
	cache.Store(cmd.args[1], cmd.args[2])
	cmd.conn.Write([]uint8(\"+OK\\r\\n\"))
	return true
}"
		]],
		["p", [], [
			"As always, first thing we do is validate the number of arguments.",
			" But in this case, SET is more tricky than the others."
		]],
		["p", [], [
			"When more than 3 arguments are passed we check for the NX or XX flags and handle them accordingly.",
		]],
		["ul", [], [
			["li", [], optionFormat("NX", "", "Only set the key if it does not already exist.")],
			["li", [], optionFormat("XX", "", "Only set the key if it already exist.")],
		]],
		["p", [], [
			"Then we parse the expiration flags if any. We'll see how that's done in a second.",
		]],
		["p", [], [
			"After handling all those special cases we finally store the key and value in the cache,",
			" write the +OK response and return true to keep the connection alive."
		]],
		["p", [], [
			["strong", [], "Expiration"]
		]],
		["pre", ["class", "triple-quote go language-go"], [
"// setExpiration Handles expiration when passed as part of the 'set' command.
func (cmd Command) setExpiration(pos int) error {
	option := strings.ToUpper(cmd.args[pos])
	value, _ := strconv.Atoi(cmd.args[pos+1])
	var duration time.Duration
	switch option {
	case \"EX\":
		duration = time.Second * time.Duration(value)
	case \"PX\":
		duration = time.Millisecond * time.Duration(value)
	default:
		return fmt.Errorf(\"expiration option is not valid\")
	}
	go func() {
		log.Printf(\"Handling '%s', sleeping for %v\\n\", option, duration)
		time.Sleep(duration)
		cache.Delete(cmd.args[1])
	}()
	return nil
}"
		]],
		["p", [], [
			"We read the option and the expiration value, then we compute the duration",
			" for each case and we spawn a new goroutine that sleeps for that amount of",
			" time and the deletes the key from the cache."
		]],
		["p", [], [
			"This is not the most efficient way to do it, but it's simple and it works for us."
		]],
		["h2", [], "Working server"],
		["p", [], [
			"At this point we have an usable implementation of Redis.",
		]],
		["p", [], [
			"Let's start the server the server and test it.",
		]],
		["pre", ["class", "triple-quote redis language-css"], [
			"$ go run main.go",
			"2023/04/08 21:09:40 Listening on tcp://0.0.0.0:6380",
		]],
		["p", [], [
			"On a different terminal connect to the server.",
		]],
		["pre", ["class", "triple-quote redis language-css"], [
			"$ telnet 127.0.0.1 6380",
			"GET a",
			"$-1",
			"set a \"test \\\"quotes\\\" are working\"",
			"+OK",
			"get a",
			"$25",
			"test \"quotes\" are working",
		]],
		["p", [], [
			"It's alive!! Go have fun."
		]],
		["p", [], [
			"If you'd like to access the source code of this project there's a public gist",
			" containing all of the code displayed here."
		]],
		["p", [], [
			["a", ["href", "https://gist.github.com/mliezun/f55baa4cd024c1cdf3030e49c5f87875", "target", "_blank"], "Link to source code"]
		]]
	]
)
