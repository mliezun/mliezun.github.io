fn find(list, obj) {
    for let i = 0; i < list.length; i = i + 1 {
        if type(list[i]) == type(obj) and list[i] == obj {
            return i
        }
    }
    return -1
}

fn findBy(list, byFn) {
    for let i = 0; i < list.length; i = i + 1 {
        if byFn(list[i]) {
            return i
        }
    }
    return -1
}

fn findSubstr(str, substr) {
    for let i = 0; i < str.length - substr.length + 1; i = i + 1 {
        if str[i:i+substr.length] == substr {
            return i
        }
    }
    return -1    
}

fn filter(list, predicate) {
    let out = []
    for el in list {
        if predicate(el) {
            out = out + [el]
        }
    }
    return out
}

fn map(list, mapFn) {
    let out = []
    for el in list {
        out = out + [mapFn(el)]
    }
    return out
}

fn each(list, eachFn) {
    for el in list {
        eachFn(el)
    }
}

fn foldl(list, initial, foldFn) {
    let out = initial
    for el in list {
        out = foldFn(out, el)
    }
    return out
}

fn foldr(list, initial, foldFn) {
    let out = initial
    for let i = list.length; i > 0; i = i - 1 {
        out = foldFn(out, list[i-1])
    }
    return out
}

fn any(list) {
    for el in list {
        if el {
            return true
        }
    }
    return false
}

fn sum(a, b) {
    return a + b
}

fn endsWith(str, substr) {
    if str.length < substr.length {
        return false
    }
    return str[str.length-1] == substr[substr.length-1] and endsWith(str[:str.length-1], substr[:substr.length-1])
}

fn copy(list) {
    let out = []
    for el in list {
        out = out + [el]
    }
    return out
}

fn sortBy(list, compareFn) {
    let out = copy(list)
    for let i = 0; i < out.length-1; i = i + 1 {
        for let j = i+1; j < out.length; j = j + 1 {
            if compareFn(out[i], out[j]) > 0 {
                let tmp = out[i]
                out[i] = out[j]
                out[j] = tmp
            }
        }
    }
    return out
}

fn split(str, char) {
    return strings.split(str, char)
}

fn splitlines(str) {
    return split(str, "\n")
}

fn trimchar(str, char) {
    if str.length == 0 {
        return str
    }
    while char == str[0] {
        str = str[1:]
    }
    if str.length == 0 {
        return str
    }
    while char == str[str.length-1] {
        str = str[:str.length-1]
    }
    return str
}

fn trimspaces(str) {
    return trimchar(str, " ")
}

fn join(list, char) {
    let out = ""
    for let i = 0; i < list.length; i = i + 1 {
        out = out + list[i]
        if i != list.length - 1 {
            out = out + char
        }
    }
    return out
}

fn startswith(str, substr) {
    if str.length < substr.length {
        return false
    }
    return str[:substr.length] == substr
}

fn replace(str, findStr, replaceStr) {
    if startswith(str, findStr) {
        return replaceStr + replace(str[findStr.length:], findStr, replaceStr)
    }
    let ix = findSubstr(str, findStr)
    if ix == -1 {
        return str
    }
    return str[:ix] + replaceStr + replace(str[ix+findStr.length:], findStr, replaceStr)
}

fn keys(dict) {
    let keys = []
    for key in dict {
        keys = keys + [key]
    }
    return keys
}
