let http = import("http.gr")
let html = import("html.gr")
let router = import("router.gr")
let u = import("utils.gr")

class Web {
    init(include_feed) {
        this.renderer = html.Renderer()
        this.routes = router.get_routes(include_feed)
        this.renderPages()
    }


    addIf(condition, content) {
        if condition {
            return content
        }
        return ""
    }

    head(url, metadata) {
        let og_image = metadata["image"]
        if og_image != "" and not u.startswith(og_image, "http") {
            og_image = "https://mliezun.com" + og_image
        }
        if og_image == "" {
            og_image = "https://mliezun.com/assets/images/nyc.jpg"
        }

        return ["head", [], [
            # Redirect to mliezun.com if on GitHub Pages
            ["script", ["type", "text/javascript"], [
                "if (window.location.host === 'mliezun.github.io') {
                    window.location.host = 'mliezun.com';
                }",
            ]],
            ["meta", ["charset", "UTF-8"], []],
            ["meta", ["http-equiv", "X-UA-Compatible", "content", "IE=edge"], []],
            ["meta", ["name", "viewport", "content", "width=device-width, initial-scale=1"], []],

            ["title", [], metadata["title"]],

            ["meta", ["name", "generator", "content", "Custom"], []],
            ["meta", ["property", "og:title", "content", metadata["title"]], []],
            ["meta", ["property", "og:locale", "content", "en_US"], []],
            ["meta", ["name", "description", "content", metadata["excerpt"]], []],
            ["meta", ["property", "og:description", "content", metadata["excerpt"]], []],
            ["meta", ["name", "keywords", "content", metadata["tags"]], []],

            ["link", ["rel", "canonical", "href", "https://mliezun.com" + url], []],
            ["meta", ["property", "og:url", "content", "https://mliezun.com" + url], []],
            ["meta", ["property", "og:site_name", "content", "mliezun.com"], []],
            ["meta", ["property", "og:image", "content", og_image], []],
            ["link", ["rel", "icon", "type", "image/x-icon", "href", "/assets/images/favicon.ico"], []],

            this.addIf(
                metadata["content_type"],
                ["meta", ["property", "og:type", "content", metadata["content_type"]], []],
            ),
            ["meta", ["name", "twitter:card", "content", "summary"], []],
            ["meta", ["property", "twitter:title", "content", metadata["title"]], []],
            ["meta", ["name", "twitter:creator", "content", "@migueliezun"]],
            ["meta", ["name", "twitter:image", "content", "https://mliezun.com/assets/images/nyc.jpg"]],

            this.addIf(
                metadata["content_type"] != "article",
                ["script", ["type", "application/ld+json"], [
                    "{\"name\":\"mliezun.com\",\"description\":\"" + metadata["excerpt"] + "\",\"@type\":\"WebSite\",\"url\":\"https://mliezun.com/\",\"headline\":\"" + metadata["title"] + "\",\"@context\":\"https://schema.org\"}",
                ]],
            ),

            this.addIf(
                metadata["content_type"] == "article",
                ["script", ["type", "application/ld+json"], [
                    "{\"description\":\"" + metadata["excerpt"] + "\",\"author\":{\"@type\":\"Person\",\"name\":\"Miguel Liezun\"},\"@type\":\"BlogPosting\",\"url\":\"https://mliezun.com" + url + "\",\"headline\":\"" + metadata["title"] + "\",\"dateModified\":\"" + metadata["date"] + "T00:00:00-03:00\",\"datePublished\":\"" + metadata["date"] + "T00:00:00-03:00\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://mliezun.com" + url + "\"},\"@context\":\"https://schema.org\"}"
                ]],
            ),

            # Fonts & CSS
            ["link", ["rel", "preconnect", "href", "https://fonts.googleapis.com"]],
            ["link", ["rel", "preconnect", "href", "https://fonts.gstatic.com", "crossorigin"]],
            ["link", ["rel", "stylesheet", "href", "https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"]],
            ["link", ["rel", "stylesheet", "href", "/assets/css/style.css"], []],
        ]]
    }

    footer() {
        return ["footer", [], [
            ["hr", [], []],
            ["div", ["class", "footer-wrapper"], [
                ["div", [], [
                    ["div", [], [
                        "This blog was made with ",
                        ["a", ["target", "_blank", "href", "https://github.com/mliezun/grotsky"], "Grotsky"]
                    ]],
                    ["div", [], [
                        "Blog",
                        ["a", ["target", "_blank", "href", "https://github.com/mliezun/mliezun.com"], "source code"]
                    ]]
                ]],
                ["div", ["class", "footer-socials"], [
                    ["a", ["target", "_blank", "href", "https://mliezun.com/feed.xml"], [
                        ["img", ["alt", "RSS Feed", "src", "/assets/images/socials/rss.png", "width", "20", "height", "20", "style", "border-radius: 3px"], []]
                    ]],
                    ["a", ["target", "_blank", "href", "https://github.com/mliezun"], [
                        ["img", ["alt", "Github", "src", "/assets/images/socials/github.png", "width", "20", "height", "20"], []]
                    ]],
                    ["a", ["target", "_blank", "href", "https://x.com/migueliezun"], [
                        ["img", ["alt", "X (Twitter)", "src", "/assets/images/socials/x.ico", "width", "20", "height", "20", "style", "border-radius: 5px"], []]
                    ]],
                    ["a", ["target", "_blank", "href", "https://www.linkedin.com/in/miguel-liezun-8697a9168/"], [
                        ["img", ["alt", "LinkedIn", "src", "/assets/images/socials/linkedin.png", "width", "20", "height", "20"], []]
                    ]],
                ]]
            ]]
        ]]
    }

    body(content) {
        return ["body", [], [
            ["div", ["class", "body-wrapper"], [
                ["div", ["class", "body-content"], [
                    ["div", ["class", "site-header"], [
                        ["header", [], [
                            ["a", ["href", "/", "style", "text-decoration: none !important"], "Miguel's dev blog"],
                        ]],
                        ["button", ["class", "theme-toggle", "id", "theme-toggle", "title", "Toggle theme"], [
                            ["img", ["src", "/assets/images/circle-half.svg"], []],
                        ]],
                    ]],
                    ["hr", [], []],
                ] + content + [
                    this.footer(),
                ]],
            ]],
            # Theme switcher
            ["script", ["src", "/assets/js/theme-switcher.js"], []],
            # Highlight.js, syntax highlighter
            ["link", ["rel", "stylesheet", "href", "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/atom-one-dark.min.css"], []],
            ["script", ["src", "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"], []],
            ["script", [], [
                "document.querySelectorAll('.triple-quote').forEach(function (el) {
                    if (el.classList.length > 1) hljs.highlightElement(el, {language: el.classList[1]});
                    else hljs.highlightElement(el);
                    el.classList.remove('hljs');
                })"
            ]],
            ["script", [], [
                "document.querySelectorAll('.single-quote').forEach(function (el) {
                    if (el.classList.length > 1) hljs.highlightElement(el, {language: el.classList[1]});
                    else hljs.highlightElement(el);
                    el.classList.remove('hljs');
                })"
            ]],
        ]]
    }

    wrapBody(url, body, metadata) {
        return [
            ["!DOCTYPE HTML"],
            ["html", ["lang", "en-US"], [
                this.head(url, metadata),
                this.body(body),
            ]]
        ]
    }

    renderPages() {
        this.renderedPages = {}
        for url, route in this.routes {
            let page = ""
            if route["class"] == "html" {
                let payload = this.wrapBody(url, route["content"], route["metadata"])
                page = this.renderer.render(payload)
            } elif route["class"] == "static" {
                page = route["content"]
            }
            this.renderedPages[url] = page
        }
    }

    setContentType(rw, target) {
        let matches = {
            "html": "text/html",
            "css": "text/css",
            "wasm": "application/wasm",
            "js": "application/javascript",
        }
        for t, contentType in matches {
            if u.endsWith(target, t) {
                rw.setHeader("content-type", contentType)
                break
            }
        }
    }

    handleRq(rq, rw) {
        let page = nil

        try {
            page = this.renderedPages[rq.target]
        } catch err {
            io.println("Target not found: ", rq.target)
        }
        
        if page != nil {
            rw.setStatus("200").setBody(page)
        } else {
            this.handleNotFound(rq, rw)
        }
    }

    handleNotFound(rq, rw) {
        rw.setStatus("404").setBody("404 Not Found")
    }

    start(port) {
        this.server = http.Server("", port, this.handleRq)
        io.println("Listening on http://0.0.0.0:" + port)
        this.server.serve()
    }
}
